server:
  port: 50003
  
spring:
  application:
    name: catalog-ws
  profiles:
    active: local
  config:
    import: optional:configserver:http://localhost:8888 
  sleuth: 
    sampler:
      probability: 1.0
  zipkin:
    base-url: http://localhost:9411/  
    discovery-client-enabled: false   
    sender.type: web         
  devtools:
    restart:
      enabled: true
  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true
      path: /h2-console        
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1

  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: consumerGroupId
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:      
       ack-mode: MANUAL_IMMEDIATE
    producer:
       bootstrap-servers: localhost:9092

  cloud:
    stream:
      function:  ## 반드시 있어야 함
        definition:  catalogUpdate
      kafka:
        default:
          consumer:
            ack-mode: MANUAL_IMMEDIATE      
        binder:
          brokers:
          - localhost:9092
      bindings:      
        catalogUpdate-in-0:
          destination: example-kafka-test
          group: consumerGroupId2


  redis:
    lettuce:
      pool:
        max-active: 8   # pool에 할당할수 있는 커넥션 최대수(default:8)
        max-idle: 8     # pool의 idle 커넥션 최대수(default:8)
        min-idle: 0     # pool의 idle 커넥션 최소수(default:0)
    host: localhost  # 
    port: 6379
    #password: 'new1234'   
      
management:
  endpoints:
    web:
      exposure:
        include: "*"    
      
feign:
  circuitbreaker:
    enabled: false
  client:
    config:
      default:
        connectTimeout: 20000  # feign의 전역 timeout 설정 : 20초
        readTimeout: 20000
        loggerLevel: FULL ##basic
    
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance.instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${random.value}}    


logging.level.org.springframework.cloud.sleuth: DEBUG

com:
  test:
    profile: test1
    region: test2